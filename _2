"""
Цель: применить на практике оператор with, вспомнить написание кода в парадигме ООП.

Задача "Найдёт везде":
Напишите класс WordsFinder, объекты которого создаются следующим образом:
WordsFinder('file1.txt, file2.txt', 'file3.txt', ...).
Объект этого класса должен принимать при создании неограниченного количество названий файлов и записывать их в атрибут file_names в виде списка или кортежа.

Также объект класса WordsFinder должен обладать следующими методами:
get_all_words - подготовительный метод, который возвращает словарь следующего вида:
{'file1.txt': ['word1', 'word2'], 'file2.txt': ['word3', 'word4'], 'file3.txt': ['word5', 'word6', 'word7']}
Где:
'file1.txt', 'file2.txt', ''file3.txt'' - названия файлов.
['word1', 'word2'], ['word3', 'word4'], ['word5', 'word6', 'word7'] - слова содержащиеся в этом файле.
Алгоритм получения словаря такого вида в методе get_all_words:
Создайте пустой словарь all_words.
Переберите названия файлов и открывайте каждый из них, используя оператор with.
Для каждого файла считывайте единые строки, переводя их в нижний регистр (метод lower()).
Избавьтесь от пунктуации [',', '.', '=', '!', '?', ';', ':', ' - '] в строке. (тире обособлено пробелами, это не дефис в слове).
Разбейте эту строку на элементы списка методом split(). (разбивается по умолчанию по пробелу)
В словарь all_words запишите полученные данные, ключ - название файла, значение - список из слов этого файла.

find(self, word) - метод, где word - искомое слово. Возвращает словарь, где ключ - название файла, значение - позиция первого такого слова в списке слов этого файла.
count(self, word) - метод, где word - искомое слово. Возвращает словарь, где ключ - название файла, значение - количество слова word в списке слов этого файла.
В методах find и count пользуйтесь ранее написанным методом get_all_words для получения названия файла и списка его слов.
Для удобного перебора одновременно ключа(названия) и значения(списка слов) можно воспользоваться методом словаря - item().

for name, words in get_all_words().items():
  # Логика методов find или count
"""


class WordsFinder:  # Создаем класс WordFinder
    def __init__(self, *files_names: object) -> object:
        self.file_names = files_names

    def get_all_words(self):  # Подготовительный метод
        all_words = {}  # Создаем пустой словарь
        for file_name in self.file_names:  # Перебираем каждый фаил.
            with open(file_name, 'r', encoding='utf-8') as file:  # Открываем фаил, читаем его.
                words = file.read().split()  # Разбиваем строку на элементы
                all_words[file_name] = words  # В Словарь all_words записываем полученные данные
        return all_words  # Возращаем словарь

    def find(self, word):  # find(self, word) - метод, где word - искомое слово
        position = 0 #Изначапльное количество слов 
        for name, words in self.get_all_words().items(): # Получаем  фаил из списка его слов
            for i in words:
                position += 1 #Прибавляк к position +1
                if word.lower() == i: #Если буквы в нижнем рестигре(word.lower) то приравниваем к значению i
                    return {name: position} #Возвращаем словарь, где ключ - название файла, значение - количество слова word в списке слов этого файла.

    def count(self, word): #count(self, word) - метод, где word - искомое слово
        count_of_words = 0 #Изначальное количество слов
        for name, words in self.get_all_words().items(): #Получаем фаил из списка его слов 
            for i in words:
                if word.lower() == i:
                    count_of_words += 1
            return {name: count_of_words} # Возвращаем словарь, где ключ - название файла, значение - количество слова word в списке слов этого файла.


# Пример использования:
finder = WordsFinder('test_file.txt')
print(finder.get_all_words())  # Все слова
print(finder.find('TEXT'))  # Нахождение слова и его положение в файле
print(finder.count('teXT'))  # Подсчёт количества слов teXT в тексте
